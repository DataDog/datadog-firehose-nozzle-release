variables:
  VERSION:
    value: ''
    description: 'The version to release'
  BLOBS_BUCKET:
    value: 'public-datadog-firehose-nozzle-blobs'
    description: 'Bucket where the generated artifacts (blobs) is stored'
  RELEASE_BUCKET:
    value: 'cloudfoundry.datadoghq.com/datadog-firehose-nozzle'
    description: 'Bucket where the actual nozzle release is be stored'
  DRY_RUN:
    value: 'true'
    description: 'Set to true to do a dry run'
  REPO_BRANCH:
    value: 'master'
    description: 'The branch to use'
  GO_VERSION:
    value: '1.24.4'
    description: 'The Go version to upgrade to'

datadog-firehose-nozzle-release:
  stage: deploy
  image: registry.ddbuild.io/ci/datadog-agent-buildimages/gitlab_agent_deploy:v48815877-9bfad02c
  tags: ['runner:main']
  when: manual
  script:
    - 'curl -o go1.24.2.linux-amd64.tar.gz https://golang.org/dl/go1.24.2.linux-amd64.tar.gz -L'
    - 'tar -xzf go1.24.2.linux-amd64.tar.gz'
    - 'export PATH=$PATH:$(pwd)/go/bin'
    - 'export GOROOT=$(pwd)/go'
    - set +x
    - ./scripts/publish.sh

update-go-version:
  stage: deploy
  image: registry.ddbuild.io/ci/datadog-agent-buildimages/gitlab_agent_deploy:v48815877-9bfad02c
  tags: ['runner:main']
  when: manual
  variables:
    TARBALL_NAME: 'go${GO_VERSION}.linux-amd64.tar.gz'
    TARBALL_URL: 'https://go.dev/dl/go${GO_VERSION}.linux-amd64.tar.gz'
    BLOB_PATH: 'golang/${TARBALL_NAME}'
    PACKAGE_NAME: 'golang${GO_VERSION}'
  script:
    - |
      if [ -z "$GO_VERSION" ]; then
        echo "❌ GO_VERSION must be provided as a CI variable (e.g., 1.24.2)"
        exit 1
      fi
    
    - export DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
    - export WORKING_DIR="$DIR/.."
    - echo "Installing bosh CLI"
    - apt-get update && apt-get install -y curl unzip
    - curl -L -o bosh https://github.com/cloudfoundry/bosh-cli/releases/download/v7.9.7/bosh-cli-7.9.7-linux-amd64
    - chmod +x bosh
    - mv bosh /usr/local/bin/bosh
    - bosh --version
    - git config --global push.default simple
    - git fetch
    - git checkout $REPO_BRANCH

    - echo "Cleaning up existing Go packages"
    - |
      for pkg in packages/golang*; do
        if [ -d "$pkg" ] && [[ "$pkg" != "packages/${PACKAGE_NAME}" ]]; then
          echo "Removing package dir: $pkg"
          rm -rf "$pkg"
        fi
      done

    - echo "Removing old Go blobs via bosh remove-blob"
    - |
      if bosh blobs | grep -q 'golang/go'; then
        for blob in $(bosh blobs | grep 'golang/go' | awk '{print $1}'); do
          if [[ "$blob" != "$BLOB_PATH" ]]; then
            echo "Removing blob: $blob"
            bosh remove-blob "$blob"
          fi
        done
      else
        echo "No old Go blobs found."
      fi
    - echo "Downloading Go tarball ${TARBALL_URL}"
    - curl -fsSL "${TARBALL_URL}" -o "/tmp/${TARBALL_NAME}"
    - echo "Creating package directory - packages/${PACKAGE_NAME}"
    - mkdir -p "packages/${PACKAGE_NAME}"
    - echo "Writing spec to packages/${PACKAGE_NAME}/spec"
    - |
      cat > "packages/${PACKAGE_NAME}/spec" <<EOF
      ---
      name: ${PACKAGE_NAME}

      files:
      - ${BLOB_PATH}
      EOF
    - echo "Adding blob to release - ${BLOB_PATH}"
    - bosh add-blob "/tmp/${TARBALL_NAME}" "${BLOB_PATH}"

    - cp $WORKING_DIR/config/final.yml.s3 $WORKING_DIR/config/final.yml
    - |
      cat > "$WORKING_DIR/config/private.yml" <<EOF
      {
        "blobstore": {
          "options": {
            "credentials_source": "env_or_profile"
          }
        }
      }
      EOF
    - echo "Syncing blobs from blobstore"
    - bosh sync-blobs
    - echo "Uploading blobs to blobstore"
    - bosh upload-blobs
    - echo "Validating release creation"
    - bosh create-release --force --tarball="datadog-firehose-nozzle.tgz"
    - echo "Comitting changes to the target branch ${TARGET_BRANCH}"
    - mkdir -p ~/.ssh
    - aws ssm get-parameter --name ci.datadog-firehose-nozzle-release.ssh_private_key --with-decryption --query "Parameter.Value" --out text --region us-east-1 > ~/.ssh/id_rsa_github
    - chmod 400 ~/.ssh/id_rsa_github
    - echo "Setup ssh key"
    - eval "$(ssh-agent -s)"
    - ssh-add ~/.ssh/id_rsa_github
    - ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
    - echo "Configuring git"
    - git config --global user.email "Robot-Github-IntegrationToolsandLibraries@datadoghq.com"
    - git config --global user.name "robot-github-intg-tools"
    - git remote set-url origin git@github.com:DataDog/datadog-firehose-nozzle-release.git
    - echo "Committing changes to the target branch ${TARGET_BRANCH}"
    - git add $WORKING_DIR
    - git commit -m "release datadog firehose nozzle $VERSION"
    - git push

  rules:
    - if: '$GO_VERSION'
      when: always
